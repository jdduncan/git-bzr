You're working on software.  You use a git repo for local development of a 
particular sub-project, but the main project is actually managed in bzr. 

This is a little tool to help create patches from git and apply them to bzr.

It allows patches to created from git, tested, applied to bzr, and then either 
committed to the bzr repo or rolled back -- all in separate, independent steps.

It delineates a careful, manual (but not *too* manual) process for deploying 
changes from one tree to another.


TO CONFIGURE IT
---------------
 (1) install git-bzr in /usr/local/bin 
 (2) cd into a git repository 
 (3) git config git-bzr.bzr-tree /path/to/bzr/tree
 (4) git config git-bzr.vault /path/to/a/working/directory

Maybe your git repo only includes part of the bzr project. The bzr-tree needn't 
be the top of the bzr clone, but it should correspond to the top level of the 
git repository, so that a patch to a/file.c in one place can be applied to 
a/file.c in the other. 

The working directory (the vault) will contain a log file that records the
history of each patch generated by git-bzr.  It will also contain the patches 
themselves, each classified as "pending", "committed", or "rolled back". 


AN EXAMPLE
----------

% git bzr make-patch 2f889e6a     # Make a patch from some commit
 - OR -
% git bzr diff rev-1 rev-2        # Make a patch from some diff
[...]
 Created patch 13

% git bzr test 13
 [ You see the output of patch --dry-run against the bzr tree]

% git bzr apply 13 
 [ Apply the patch ]
 
% ... go over to the bzr repo and test the patch ...

% git bzr commit 13  
 - OR -
% git bzr rollback 13


ONE MORE NOTE
-------------
This is not the only git-bzr package out there.  There is at least another
git-bzr on github and a git-bzr-ng on launchpad. 
