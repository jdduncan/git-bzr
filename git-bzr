#!/bin/bash

#
# 
#  Get the diff between two git trees, then apply it to a bzr tree

## Save the initial directory
INITIAL_WD=`pwd`

# Path to the rc file
GIT_BZR_RC=$HOME/git-bzr.rc

die() {
  echo Error: $1
  cd $INITIAL_WD
  exit 1
}

usage() {
  echo "usage: "
  echo " $0 --diff <git-rev-1> <git-rev-2>    Create a patch file"
  echo " $0 --patch <patch-id>                Apply patch to bzr tree"
  echo " $0 --commit <patch-id>               Commit a patch to bzr"
  echo " $0 --rollback <patch-id>             Revert patch from bzr"
  echo
  exit 1
}

env_error() {
  echo "To use this utility you must define three variables: "
  echo "  GIT_TREE     Path to git repository"
  echo "  BZR_TREE     Path to bzr repository"
  echo "  WORK_DIR     Path to working directory for patches and logs"
  echo   
  echo "You can define these in your $HOME/git-bzr.rc file"
  echo
  exit 1
}

get_working_paths() {
  test -n "$BZR_TREE" -a -n "$GIT_TREE" -a -n "WORK_DIR" || source $GIT_BZR_RC
  test -n "$BZR_TREE" -a -n "$GIT_TREE" -a -n "WORK_DIR" || env_error
}

prep_working_dir() {
  ## Prep to do in the working dir:
  test -d $WORK_DIR || die "Working directory not found" 
  cd $WORK_DIR  || die "Unable to cd into working directory; check permissions"

  ## Build some directories
  test -d pending    || mkdir pending
  test -d committed  || mkdir committed
  test -d rolledback || mkdir rolledback
  cd $INITIAL_WD
}

bump_sequence() {
  cd $WORK_DIR
  if test -f "__index" 
    then let idx=`cat __index`
    let idx=idx+1
  else 
    let idx=1
  fi
  echo $idx > __index
  cd $INITIAL_WD
}


do_diff() { 
  VER1="$1"
  VER2="$2"
  ONEFILE="$3"
  test -n "$1" || usage
  test -n "$2" || usage

  bump_sequence
  
  ## Here's the output file for the diff
  PATCH_FILE=$WORK_DIR/pending/$idx.patch

  ## And the log file
  LOG_FILE=$WORK_DIR/history

  ## Now move on to the git tree
  cd $GIT_TREE

  # Get fully-qualified SHA1 id's of the revision specs
  VER1_FQ=`git rev-parse --quiet --verify --revs-only $VER1`
  VER2_FQ=`git rev-parse --quiet --verify --revs-only $VER2`

  test -n "$VER1_FQ" || die "$VER1 does not designate a git tree"
  test -n "$VER2_FQ" || die "$VER2 does not designate a git tree"

  ## Summarize the diff
  echo Summary:
  git diff --stat $VER1 $VER2 $ONEFILE
  SHORTSTAT=`git diff --shortstat $VER1 $VER2 $ONEFILE`

  ## Obtain the diff 
  git diff $VER1 $VER2 $ONEFILE > $PATCH_FILE

  ## Write the log message
  ( 
    echo "Index: $idx" 
    echo "Date: " `date` 
    test -n "$ONEFILE" && echo "File: $ONEFILE"
    echo "Diff from: $VER1_FQ to $VER2_FQ"
    echo $SHORTSTAT
    echo
  ) >> $LOG_FILE

  echo 
  echo "Created patch $idx"
}

get_patch_file() {
  test -n "$1" || usage
  idx="$1"
  PATCH_FILE=$WORK_DIR/pending/$idx.patch
  test -f "$PATCH_FILE" || die "File not found: $PATCH_FILE"    
}

do_patch() {
  get_patch_file "$1"

  cd $BZR_TREE
  patch --posix -p 1 -i $PATCH_FILE
}

do_commit() {
  get_patch_file "$1"
  
  cd $BZR_TREE
  bzr commit 
  
  cd $WORK_DIR
  mv pending/$idx.patch committed/
}

do_rollback() {
  get_patch_file "$1"
  
  cd $WORK_DIR
  mv pending/$idx.patch rolledback/
  
  cd $BZR_TREE
  bzr revert
  find . -name \*.rej  -exec rm '{}' \;
  find . -name \*.orig -exec rm '{}' \;
}
  

### MAIN ROUTINE 

get_working_paths
prep_working_dir
case "$1" in 
  "--diff" )
     do_diff $2 $3 $4
  ;;
  "--patch" )
     do_patch $2
  ;;
  "--commit" )
     do_commit $2
  ;;
  "--rollback" )
     do_rollback $2
  ;; 
  * ) 
     usage
  ;;
esac
cd $INITIAL_WD

