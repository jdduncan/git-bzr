#!/bin/bash

#
#  Create a patch, then apply it to a bzr tree

## Save the initial directory
INITIAL_WD=`pwd`

die() {
  echo Error: $1
  cd $INITIAL_WD
  exit 1
}

usage() {
  echo "USAGE: "
  echo " git bzr make-patch <git-revision>      Create a patch file based on a commit"
  echo " git bzr diff  <git-rev-1> <git-rev-2>  Create a patch file based on 2 versions"
  echo " git bzr test     <patch-id>            Show dry run of applying patch"
  echo " git bzr apply    <patch-id>            Apply patch to bzr tree"
  echo " git bzr commit   <patch-id>            Commit a patch to bzr tree"
  echo " git bzr rollback <patch-id>            Revert patch from bzr tree"
  echo " git bzr latest                         Display the most recent commit"
  echo
  exit 1
}

get_working_paths() {
  BZR_TREE=`git config git-bzr.bzr-tree`
  WORK_DIR=`git config git-bzr.vault` 
  test -n "$BZR_TREE" -a -n "WORK_DIR" && return
  echo "Before using this utility you must use ``git config'' to define two variables: "
  echo "  git-bzr.bzr-tree    Path to bzr repository"
  echo "  git-bzr.vault       Path to working directory for patches and logs"
  echo   
  exit 1  
}

prep_working_dir() {
  ## Prep to do in the working dir:
  test -d $WORK_DIR || die "Working directory not found" 
  cd $WORK_DIR  || die "Unable to cd into working directory; check permissions"

  ## Build some directories
  test -d pending    || mkdir pending
  test -d committed  || mkdir committed
  test -d rolledback || mkdir rolledback
  test -d info_files || mkdir info_files
  cd $INITIAL_WD
}

bump_sequence() {
  cd $WORK_DIR
  if test -f "__index" 
    then let idx=`cat __index`
    let idx=idx+1
  else 
    let idx=1
  fi
  echo $idx > __index
  cd $INITIAL_WD
}


do_diff() { 
  VER1="$1"
  VER2="$2"
  ONEFILE="$3"
  test -n "$1" || usage
  test -n "$2" || usage

  bump_sequence
  
  ## Here's the output file for the diff
  PATCH_FILE=$WORK_DIR/pending/$idx.patch
  PATCH_INFO_FILE=$WORK_DIR/info_files/$idx

  ## And the log file
  LOG_FILE=$WORK_DIR/history

  # Get fully-qualified SHA1 id's of the revision specs
  VER1_FQ=`git rev-parse --quiet --verify --revs-only $VER1`
  VER2_FQ=`git rev-parse --quiet --verify --revs-only $VER2`

  test -n "$VER1_FQ" || die "$VER1 does not designate a git tree"
  test -n "$VER2_FQ" || die "$VER2 does not designate a git tree"

  ## Summarize the diff
  echo Summary:
  git diff --stat $VER1 $VER2 $ONEFILE
  SHORTSTAT=`git diff --shortstat $VER1 $VER2 $ONEFILE`

  ## Obtain the diff 
  git diff -U4 $VER1 $VER2 $ONEFILE > $PATCH_FILE

  ## Write the log message
  ( 
    echo "Index: $idx" 
    echo "Date: " `date` 
    test -n "$ONEFILE" && echo "File: $ONEFILE"
    echo "Diff from: $VER1_FQ to $VER2_FQ"
    echo $SHORTSTAT
    echo
  ) >> $LOG_FILE

  ## Write the info file
  echo "Patch: $idx Rev: $VER2_FQ " `date` > $PATCH_INFO_FILE

  echo 
  echo "Created patch $idx"
}

get_patch_file() {
  test -n "$1" || usage
  idx="$1"
  PATCH_FILE=$WORK_DIR/pending/$idx.patch
  test -f "$PATCH_FILE" || die "File not found: $PATCH_FILE"    
}

do_dry_run() {
  get_patch_file "$1"
  cd $BZR_TREE
  patch --dry-run --posix -p 1 -i $PATCH_FILE
}

do_patch() {
  get_patch_file "$1"

  cd $BZR_TREE
  patch -V simple --posix -p 1 -i $PATCH_FILE
}

do_commit() {
  get_patch_file "$1"
  
  cd $BZR_TREE
  bzr commit 
  
  cd $WORK_DIR
  mv pending/$idx.patch committed/
  echo $idx > latest.commit
}

do_rollback() {
  get_patch_file "$1"
  
  cd $WORK_DIR
  mv pending/$idx.patch rolledback/
  
  cd $BZR_TREE
  bzr revert
  find . -name \*.rej  -exec rm '{}' \;
  find . -name \*.orig -exec rm '{}' \;
}

do_latest() {
  cd $WORK_DIR
  if test -f latest.commit 
    then let idx=`cat latest.commit`
    cat info_files/$idx
  else
    echo "No history information available."
  fi
}
  

### MAIN ROUTINE 

get_working_paths
prep_working_dir
case "$1" in 
  "diff" )
     do_diff $2 $3 $4
  ;;
  "make-patch" )
     VER1="$2""^1"
     do_diff $VER1 $2
  ;;
  "test" ) 
     do_dry_run $2
  ;;
  "apply" )
     do_patch $2
  ;;
  "commit" )
     do_commit $2
  ;;
  "rollback" )
     do_rollback $2
  ;; 
  "latest" )
     do_latest
  ;;
  * ) 
     usage
  ;;
esac
cd $INITIAL_WD

